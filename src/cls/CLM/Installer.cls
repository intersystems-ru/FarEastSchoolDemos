Class CLM.Installer
{

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest>
<IfNotDef Var="Namespace">
<Var Name="Namespace" Value="CLM"/>
<Log Text="Set namespace to ${Namespace}" Level="0"/>
</IfNotDef>

<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
<Log Text="Creating namespace ${Namespace}" Level="0"/>

<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}" Ensemble="" Data="${Namespace}">
<Log Text="Creating database ${Namespace}" Level="0"/>

<Configuration>
<Database Name="${Namespace}" Dir="${MGRDIR}/${Namespace}" Create="yes" MountRequired="true" Resource="%DB_${Namespace}" PublicPermissions="RW" MountAtStartup="true"/>
</Configuration>

<Log Text="End creating database ${Namespace}" Level="0"/>
</Namespace>

 <Log Text="End creating namespace ${Namespace}" Level="0"/>
</If>

<Namespace Name="${Namespace}" Create="no">
<Log Text="CLM configuration is running" Level="0"/>
<RunInstall Class="CLM.Installer" Method="CLMConfiguration"/>
<Log Text="CLM configuration has been finished" Level="0"/>
</Namespace>

<Namespace Name="${Namespace}" Create="no">
<IfDef Var="SourceDir">
<Log Text="SourceDir defined - offline install from ${SourceDir}" Level="0"/>
<RunInstall Class="CLM.Installer" Method="OfflineInstall"/>
</IfDef>

<IfNotDef Var="SourceDir">
<Log Text="SourceDir undefined - online install from GitHub" Level="0"/>
<RunInstall Class="CLM.Installer" Method="DownloadFromGitHub"/>
</IfNotDef>
</Namespace>
</Manifest>
}

///  This is a method generator whose code is generated by XGL.
/// Set pVars("Namespace")="CLM"
/// Set pVars("SourceDir")="C:\temp\CLM\"
/// do ##class(CLM.Installer).setup(.pVars)
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 0, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
 	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

ClassMethod DownloadFromGitHub(pVars, pLogLevel, tInstaller) As %Status
{
    Set Namespace = tInstaller.Evaluate("${Namespace}")
    Do tInstaller.PushNS("%SYS")
    Set tSC = ..Update(Namespace, "intersystems-ru", "cache-localization-manager", "master")
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    quit $$$OK
}

ClassMethod Update(Namespace = {$Namespace}, Owner As %String = "intersystems-ru", Repository As %String = "cache-localization-manager", Branch As %String, Username As %String = "clminstaller", Password As %String = "clminstaller2016") As %Status
{
	Set namespace = $Namespace
 	Set SSLConfig = "GitHub"
 	Zn "%SYS"
 	Do:'##class(Security.SSLConfigs).Exists(SSLConfig) ##class(Security.SSLConfigs).Create(SSLConfig)

 	Set req=##class(%Net.HttpRequest).%New()
 	Set req.Https=1
	Set req.SSLConfiguration=SSLConfig
	Set req.Server="api.github.com"
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/contents" 	// as described in https://developer.github.com/v3/repos/	
	Do:$d(Branch) req.SetParam("ref",Branch) 								// if omitted the repositoryâ€™s default branch (usually master) would be used
	Do req.SetHeader("Accept","application/vnd.github.v3+json") 			// we want to receive API v3
	
	If ($d(Username) && $d(Password)) {										// supply Username and Passwor, if both are provided. GitHub accept Basic Auth
		Set req.Username = Username											// https://developer.github.com/v3/auth/
	 	Set req.Password = Password
	} 	
	
 	Set links = ##class(%ListOfDataTypes).%New()
 	Set st = ..ProcessDirectory("",req,.links)
 	Return:$$$ISERR(st) st
 	 	
 	Zn Namespace
	Set st = ..DownloadFiles(links,req,.list)
	Set st2 = $system.OBJ.CompileList(.list)
	Zn namespace
	
 	Return $$$ADDSC(st, st2)
}

ClassMethod DownloadFiles(Links As %ListOfDataTypes, Request As %Net.HttpRequest, Output Items) As %Status
{
	Kill Items
	Set Request.Server = "raw.githubusercontent.com"
	Set st = $$$OK
	
	For i = 1:1:Links.Count() {
		Set streq = Request.Get($e(Links.GetAt(i),35,*)) // Remove "https://raw.githubusercontent.com/" from URL.	
		Set:$$$ISERR(streq) st=$$$ADDSC(st, streq)
 		Set stload = $system.OBJ.LoadStream(Request.HttpResponse.Data,"",.error,.items)
 		Set:$$$ISERR(stload) st=$$$ADDSC(st, stload)
 		Merge Items = items
	}
	
	Set Request.Server="api.github.com"
	Return st
}

ClassMethod ProcessDirectory(Path As %String = "", Request As %Net.HttpRequest, ByRef Links As %ListOfDataTypes) As %Status
{
	Set location = Request.Location
	Set Request.Location = Request.Location _ Path
	
	Set st = Request.Get(,,$$$NO)
	Return:$$$ISERR(st) st
	Return:(Request.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((Request.HttpResponse.StatusCode = 403) && (Request.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(Request.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ Request.HttpResponse.StatusCode _ " status, expected 200")
 	
 	#dim objects As List of %ZEN.proxyObject
 	#dim obj As %ZEN.proxyObject
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Request.HttpResponse.Data,,.objects,1)
	Return:$$$ISERR(st) st
	
	For i = 1:1:objects.Count() {		
		Set obj = objects.GetAt(i)
		If (obj.type = "dir") {
			Set st = ..ProcessDirectory("/"_obj.name,Request,.Links)
			Return:$$$ISERR(st) st		
		} ElseIf (obj.type = "file") {
			Do:..IsCacheFile(obj) Links.Insert(obj."download_url")
		} Else {
			// obj.type = "symlink" or obj.type = "submodule"
		} 
	}
	Set Request.Location = location // to keep track of where in the repository tree we are
	Return $$$OK
}

ClassMethod IsCacheFile(File As %ZEN.proxyObject) As %Boolean
{
	Set extensions = ",xml,cls,csp,csr,mac,int,bas,inc,gbl,prj,obj,pkg,gof,"
	Return:($L(File.name,".")=1) 0 //no extension
	Set File.Extension = $P(File.name,".",$L(File.name,"."))
	Return $F(extensions,","_$ZCVT(File.Extension,"l")_",")
}

ClassMethod OfflineInstall(ByRef pVars, pLogLevel As %Integer = 0, tInstaller As %Installer.Installer) As %Status
{
	set ns = $Namespace
	set namespace = tInstaller.Evaluate("${Namespace}")
	
	zn namespace
	do $system.OBJ.ImportDir(tInstaller.Evaluate("${SourceDir}"),"*.xml","ck",.st,1)
	
	zn ns
	quit $$$OK
}

ClassMethod CLMConfiguration(ByRef pVars, pLogLevel As %String, tInstaller As %Installer.Installer) As %Status
{
	Set Namespace = tInstaller.Evaluate("${Namespace}")
	
	Do tInstaller.PushNS("%SYS")
	
	Do:'##class(Security.SSLConfigs).Exists("CLM") ##class(Security.SSLConfigs).Create("CLM")
	
	Do ##class(Security.System).GetInstallationSecuritySetting(.security)
	If (security="None") {
		Set cspProperties("AutheEnabled") = $$$AutheUnauthenticated
	} Else {
		Set cspProperties("AutheEnabled") = $$$AutheCache // Password
	}
	Write $zdt($h,3), " 0 : " ,"Creating web application /"_$ZCONVERT(Namespace, "l"), !
	Set cspProperties("NameSpace") = Namespace
	Set cspProperties("IsNameSpaceDefault") = $$$NO
	Set cspProperties("DispatchClass") = "CLM.Broker"
	Set cspProperties("GroupById") = "clm"
	Set cspProperties("MatchRoles") = ":%All"
	Set cspProperties("CookiePath") = "/"
	Set tSC = ##class(Security.Applications).Create("/"_$ZCONVERT(Namespace, "l"), .cspProperties)
	If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
	kill cspProperties, security 
	W $zdt($h,3), " 0 : " , "Web application /"_$ZCONVERT(Namespace, "l")_" created",!
		
	//--------------------------------------------------------------------------------------------//
	If (##class(Security.Applications).%ExistsId("/csp/"_$ZCONVERT(Namespace, "l")))
	{
		set CSPApplication = ##class(Security.Applications).%OpenId("/csp/"_$ZCONVERT(Namespace, "l"))
		set CSPApplication.NameSpace = Namespace
		set CSPApplication.IsNameSpaceDefault = $$$YES
		set CSPApplication.GroupById = $ZCONVERT(Namespace, "l")
		set CSPApplication.CookiePath = "/"
		set CSPApplication.MatchRoles = ":%All"
		set CSPApplication.Path = $system.Util.InstallDirectory()_"/csp/"_$ZCONVERT(Namespace, "l")
		set CSPApplication.AutheEnabled = $$$AutheUnauthenticated
		do CSPApplication.%Save()
	}
	Else
	{
		Do ##class(Security.System).GetInstallationSecuritySetting(.security)
		If (security="None") {
			Set cspProperties("AutheEnabled") = $$$AutheUnauthenticated
		} Else {
			Set cspProperties("AutheEnabled") = $$$AutheCache // Password
		}
		Write $zdt($h,3)," 0 : " ,"Creating web application /csp/"_$ZCONVERT(Namespace, "l"), !
		Set cspProperties("NameSpace") = Namespace
		Set cspProperties("IsNameSpaceDefault") = $$$YES
		Set cspProperties("GroupById") = "clm"
		Set cspProperties("CookiePath") = "/"
		Set cspProperties("MatchRoles") = ":%All"
		Set cspProperties("Path") = $system.Util.InstallDirectory()_"/csp/"_$ZCONVERT(Namespace, "l")
		Set tSC = ##class(Security.Applications).Create("/csp/"_$ZCONVERT(Namespace, "l"), .cspProperties)
		If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
		W $zdt($h,3)," 0 : " ,"Web application /csp/"_$ZCONVERT(Namespace, "l")_" created",!
	}
	
	Do tInstaller.PopNS()
	
	Do tInstaller.PushNS(Namespace)
	Set ^Git("settings", "groupByFolder") = 1
	Set ^CLM("yandexkey") 		= "trnsl.1.1.20160718T150901Z.31e0f759867d618c.2825e755db8a013f327016f007db3c619bc09e5e"
	Set ^CLM("SSLConfig") 		= "CLM"
	Do tInstaller.PopNS()
	
	Quit $$$OK
}

}
